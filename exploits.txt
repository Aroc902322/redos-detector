1)

benchmarks/Java/aviolette.foodtrucklocator.txt

"https?:\\/\\/([-\\w\\.]+)+(:\\d+)?(\\/([\\w/_\\.]*(\\?\\S+)?)?)?"  (RXXR)

[A website that keeps a map of food trucks in the Chicago area]
[An attacker can cause DoS on the web application by crafting 
a tweet with a food truck hashtag and a malicious URL. The 
web applications has a twitter crawler that will extract the 
tweet automatically each night, and be subject of a DoS attack 
when it analyzes the malicious tweet.]

2)

benchmarks/Java/Cweili.html-compressor.txt

"(?:\\p{Blank}*(\\r?\\n)\\p{Blank}*)+"

[A Java library for compressing the HTML served by a client website]

[A webpage that uses the HTML compressor filter can be subject of a DoS whenever 
a page containing a malicious sequence is served (an alternation of newline and space characters).
This requires an attacker to be able to influence the content of a website, e.g. write a product 
review that contains the malicious sequence in an e-commerce website that uses the html compressor].

3)
benchmarks/Android_Open_Source/FredJul.Flym.txt
"^(\\s*<br\\s*[/]*>\\s*)*"
"(\\s*<br\\s*[/]*>\\s*)*$"
"(\\s*<br\\s*[/]*>\\s*){3,}"

[An app that extracts newsfeeds from websites specified by the user]
[An attacker can create a malicious website. If the user of the Flym app,
fetches content from that website, the FetchService for getting updates 
for the feed reader hangs, and since the worker thread is shared across 
the entire app, the reader stops getting any feed updates, causing DoS].



4)
benchmarks/Java/mstover.AllarBank.txt
"(\\.+\\|?)+"

[A web application for hosting a gallery of images]

[The web application classifies the images of the website 
according to a format string. A malicious format string 
attached to an image can result in a DoS of the website 
when separating the calatog separation is invoked. The 
image asset can also be loaded from a descriptor file, 
so an attacker might be able to trigger the DoS by 
getting the user to load a malicious file.]


5)
benchmarks/Android_Open_Source/google.iosched.txt
"__w-((?:-?\\d+)+)__"

[An app that keeps track of events related to Google's I/O conference]
[The app parses external images with this vulnerable regular expression.
If the user performs a search that loads an image from the attacker, 
the app will hang.]



6)
benchmarks/Java/saltlab.FeedEx.txt

"\\w+:\\{(\\w+=?(\\-*\\s*[\\w%]\\s*)+\\;?\\s?)*}"  (RXXR)
"\\{(\\w+=(\\-*\\s*[\\w%]\\s*)+\\;?\\s?)*}"  (RXXR)
"(\\w+)=((\\-*\\s*[\\w%]\\s*)+)"  (RXXR)

[A research prototype for crawling the web in order 
to generate test models from existing web applications]

[The crawler can be affected by DoS when analyzing a 
malicious website containing a carefully crafted HTML/XML 
tag. The downside is that this is a research tool 
rather than a widely used web application.]

7)
benchmarks/Java/find-sec-bugs.find-sec-bugs.txt
"((a)?)+"  (RXXR)
"(a|a?)+"  (RXXR)
"(a+)+"
"([a-zA-Z]+)*"
"(a|aa)+"

[A Java plugin for analyzing the security of web applications and Android apps.]

[The regular expressions occur in some benchmarks used for testing the project.
They are stand alone Java desktop applications that our analysis should be able 
to detect, but not as interesting as a real application.]
